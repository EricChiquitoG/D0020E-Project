      /*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
  *
 * MODIFICATION NOTICE: 
 * files been generlized from original and generated during setup
 */


'use strict';

const { Gateway, Wallets } = require('fabric-network');
const path = require('path');
const { buildCCPOrgx, buildWallet } = require('../../test-application/javascript/AppUtil.js');

const myChannel = 'mychannel';
const myChaincodeName = 'auction';

const closeAuction = require('./closeAuction.js');

function prettyJSONString(inputString) {
	if (inputString) {
		return JSON.stringify(JSON.parse(inputString), null, 2);
	}
	else {
		return inputString;
	}
}

async function submitBid(ccp,wallet,user,orgMSP,auctionID,bidID,orgMSPs) {
	try {

		const gateway = new Gateway();

		//connect using Discovery enabled
		await gateway.connect(ccp,
			{ wallet: wallet, identity: user, discovery: { enabled: true, asLocalhost: true } });

		const network = await gateway.getNetwork(myChannel);
		const contract = network.getContract(myChaincodeName);

		console.log('\n--> Evaluate Transaction: query the auction you want to join');
		let auctionString = await contract.evaluateTransaction('QueryAuction',auctionID);
		let auctionJSON = JSON.parse(auctionString);

		let qb = await contract.evaluateTransaction('QueryBid',auctionID,bidID);
		let qa = await contract.evaluateTransaction('QueryAuction',auctionID);

		console.log("---bid: "+qb);
		console.log("---auction: "+qa);

		let h_bidder1, h_bid1 = await contract.evaluateTransaction('GetHb',auctionID);
		let current_w=h_bid1.highestbidder;


		let statefulTxn1 = contract.createTransaction('SubmitBid');


		statefulTxn1.setEndorsingOrganizations(...auctionJSON.organizations);

		console.log('\n--> Submit Transaction: add bid to the auction');

		let valid=true;

		if (qb.toString().includes("false") ||orgMSP === current_w) {
			valid=false;
		}

		await statefulTxn1.submit(auctionID,bidID,valid);
		
		//Added
		let auctionString2 = await contract.evaluateTransaction('QueryAuction',auctionID);
		let auctionJSON2 = JSON.parse(auctionString2);

		let statefulTxn2 = contract.createTransaction('RevealBid');
		let qb2 = await contract.evaluateTransaction('QueryBid',auctionID,bidID);

		console.log("---bid 2: "+qb)

		let bidJSON = JSON.parse(qb2);
		let bidData = { objectType: 'bid', price: parseInt(bidJSON.price), org: bidJSON.org, bidder: bidJSON.bidder, Valid: bidJSON.valid, Timestamp: bidJSON.timestamp};
		let tmapData = Buffer.from(JSON.stringify(bidData));
		
		statefulTxn2.setTransient({
			bid: tmapData
		});
			

		console.log('\n--> Evaluate Transaction: query the auction to see that our bid was added');
		let result = await contract.evaluateTransaction('QueryAuction',auctionID);
		console.log('*** Result: Auction: ' + prettyJSONString(result.toString()));

		
		//added
		
		statefulTxn2.setEndorsingOrganizations(...auctionJSON2.organizations);
		await statefulTxn2.submit(auctionID,bidID,bidJSON.valid);
		console.log('\n--> Evaluate Transaction: query the auction to see that our bid was added');
		let result2 = await contract.evaluateTransaction('QueryAuction',auctionID);
		console.log('*** Result: Auction: ' + prettyJSONString(result2.toString()));


		let h_bidder, h_bid = await contract.evaluateTransaction('GetHb',auctionID);
		console.log('**** Highest bidder:' +  h_bid);

		gateway.disconnect();
		/*
		orgMSPs.forEach(element => {if (!result.toString().includes(element)) { process.exit(0); }});
		
		let seller = "";
		var fs = require('fs');
		var orgs = fs.readdirSync('./wallet/');
		orgs.forEach(element => { var files = fs.readdirSync('./wallet/' + element); if (files.includes('seller.id')) { seller = element; } })

		const walletPath = path.join(__dirname, 'wallet/' + seller);
		const wallet2 = await buildWallet(Wallets, walletPath);

		closeAuction.closeAuction(eval("buildCCPOrg" + seller.slice(-1)+"()"), wallet2, "seller", auctionID);*/
	} catch (error) {
		console.error(`******** FAILED to submit bid: ${error}`);
		process.exit(1);
	}
}

async function main() {
	try {

		if (process.argv[2] === undefined || process.argv[3] === undefined ||
            process.argv[4] === undefined || process.argv[5] === undefined) {
			console.log('Usage: node submitBid.js org userID auctionID bidID');
			process.exit(1);
		}

		const org = process.argv[2];
		const user = process.argv[3];
		const auctionID = process.argv[4];
		const bidID = process.argv[5];
		const orgMSPs = [REPLACEME];

		if (org === 'Org1' || org === 'org1') {
			const orgMSP = 'Org1MSP';
			const ccp = buildCCPOrg1();
			const walletPath = path.join(__dirname, 'wallet/org1');
			const wallet = await buildWallet(Wallets, walletPath);
			await submitBid(ccp,wallet,user,orgMSP,auctionID,bidID,orgMSPs);
		}
        //PutNewMainStuff
		else {
			console.log('Usage: node submitBid.js org userID auctionID bidID');
			console.log('Org must be Org1 or Org2 or Org3 or Org4');
		}
	} catch (error) {
		console.error(`******** FAILED to run the application: ${error}`);
		if (error.stack) {
			console.error(error.stack);
		}
		process.exit(1);
	}
}

main();